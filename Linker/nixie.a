;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "ds3231_twi.c"
;#include "ds3231_twi.h"
;
;void twi_start(void) {
; 0000 0003 void twi_start(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;
;    while (!(TWCR & (1<<TWINT)))  {; }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;}
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void twi_stop(void) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;}
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;void twi_write(unsigned char _data)
;{
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;    TWDR = _data;
;PCODE: $00000021 VOL: 0
;	_data -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;    TWCR = (1<<TWINT)|(1<<TWEN);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;    while (!(TWCR & (1<<TWINT))) {;}
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;}
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;unsigned char twi_read(unsigned char _ack) {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;    unsigned char _data;
;
;    if (_ack==1)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	_ack -> Y+1
;	_data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;    {
;        TWCR = (1<<TWEA)|(1<<TWINT) | (1<<TWEN);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;    }
;    else
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;    {
;        TWCR = (1<<TWINT) | (1<<TWEN);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;    }
;PCODE: $0000003C VOL: 0
;    while (!(TWCR & (1<<TWINT)))
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;    {
;    }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;    _data = TWDR;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;    return _data;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;   }
;PCODE: $0000004A VOL: 0
;
;unsigned char bcd (unsigned char data) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;    return (((data & 0b11110000)>>4)*10 + (data & 0b00001111));
;PCODE: $0000004D VOL: 0
;	data -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;}
;PCODE: $0000005A VOL: 0
; unsigned char decToBcd(unsigned char val)
; {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;   return ( (val/10*16) + (val%10) );
;PCODE: $0000005D VOL: 0
;	val -> Y+0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; }
;PCODE: $0000006C VOL: 0
;
;
;
;void ds3231_init(void){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;twi_start();                           //Кидаем команду "Cтарт" на шину I2C
;PCODE: $0000006F VOL: 0
;twi_write(DS3231_I2C_ADDRESS_WRITE);              // 104 is DS3231 device address
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;twi_write(0x0E);                            //выставляемся в 14й байт
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;twi_write(0b00000000);                       //сбрасываем контрольные регистры
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;twi_write(0b10001000);                       //выставляем 1 на статус OSF и En32kHz
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;twi_stop();
;PCODE: $00000078 VOL: 0
;
;
;}
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void rtc_get_time(unsigned char *secondsParam, unsigned char *minutesParam, unsigned char *hoursParam, unsigned char *dayParam, unsigned char *dateParam, unsigned char *monthParam, unsigned char *yearParam) {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;twi_start();                           //Кидаем команду "Cтарт" на шину I2C
;PCODE: $0000007D VOL: 0
;	*secondsParam -> Y+12
;	*minutesParam -> Y+10
;	*hoursParam -> Y+8
;	*dayParam -> Y+6
;	*dateParam -> Y+4
;	*monthParam -> Y+2
;	*yearParam -> Y+0
;PCODE: $0000007E VOL: 0
;twi_write(DS3231_I2C_ADDRESS_WRITE);              // 104 is DS3231 device address
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;twi_write(0x00);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;twi_stop();
;PCODE: $00000083 VOL: 0
;
;twi_start();
;PCODE: $00000084 VOL: 0
;	twi_write(DS3231_I2C_ADDRESS_READ);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;     *secondsParam = bcd(twi_read(1)); // get seconds
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;     *minutesParam = bcd(twi_read(1)); // get minutes
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;     *hoursParam   = bcd(twi_read(1));   // get hours
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;     *dayParam     = bcd(twi_read(1));
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;     *dateParam    = bcd(twi_read(1));
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;     *monthParam   = bcd(twi_read(1)); //temp month
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;     *yearParam    = bcd(twi_read(0));
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;twi_stop();
;PCODE: $000000B1 VOL: 0
;}
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;
;void rtc_set_time(unsigned char secondsParam, unsigned char minutesParam, unsigned char hoursParam, unsigned char dayParam, unsigned char dateParam, unsigned char monthParam, unsigned char yearParam) {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;    twi_start();
;PCODE: $000000B7 VOL: 0
;	secondsParam -> Y+6
;	minutesParam -> Y+5
;	hoursParam -> Y+4
;	dayParam -> Y+3
;	dateParam -> Y+2
;	monthParam -> Y+1
;	yearParam -> Y+0
;PCODE: $000000B8 VOL: 0
;    twi_write(DS3231_I2C_ADDRESS_WRITE);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;    twi_write(0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;    twi_write(decToBcd(secondsParam));
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;    twi_write(decToBcd(minutesParam));
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;    twi_write(decToBcd(hoursParam));
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;    twi_write(decToBcd(dayParam));
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;    twi_write(decToBcd(dateParam));
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;    twi_write(decToBcd(monthParam));
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;    twi_write(decToBcd(yearParam));
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;    twi_stop();
;PCODE: $000000D9 VOL: 0
;}
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;
;//didits pins
;#define DIGIT_1  128
;#define DIGIT_2  64
;#define DIGIT_3  32
;#define DIGIT_4 16
;
;#define MODE_SHOW_MAIN_INFO 0
;#define MODE_SET_DATE_YEAR 1
;#define MODE_SET_DATE_MONTH 2
;#define MODE_SET_DATE_DAY_OF_WEEK 3
;#define MODE_SET_DATE_DAY 4
;#define MODE_SET_TIME_HOUR 5
;#define MODE_SET_TIME_MINUTE 6
;#define MODE_SET_TIME_SECONDS 7
;#define MODE_SHOW_SECONDS 8
;
;static flash unsigned char commonPins[] = {
;	DIGIT_1,
;	DIGIT_2,
;	DIGIT_3,
;	DIGIT_4
;};
;
;unsigned char digit_out[4], cur_dig = 0;
;unsigned char displayCounter = 0;
;
;unsigned char seconds;
;unsigned char minutes;
;unsigned char hours;
;unsigned char day;
;unsigned char date;
;unsigned char month;
;unsigned char year;
;
;bit button_1_on1;
;bit button_2_on1;
;bit button_3_on1;
;bit button_1_on2;
;bit button_2_on2;
;bit button_3_on2;
;bit button_1_on3;
;bit button_2_on3;
;bit button_3_on3;
;
;unsigned char mode;
;bit show_point;
;
;void doBtn1Action(void) {
; 0000 0033 void doBtn1Action(void) {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0034 	mode = mode < 7 ? (mode + 1) : 0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0035 }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;
;unsigned char getLastMonthDay(void) {
; 0000 0037 unsigned char getLastMonthDay(void) {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0038 	unsigned char retVal = 31;
; 0000 0039 	switch (month) {
;PCODE: $000000EF VOL: 0
;	retVal -> R17
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 003A 	case 1:
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 003B 	case 3:
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 003C 	case 5:
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 003D 	case 7:
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 003E 	case 8:
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 003F 	case 10:
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0040 	case 12:
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0041 		retVal = 31;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0042 		break;
;PCODE: $00000116 VOL: 0
; 0000 0043 	case 4:
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0044 	case 6:
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0045 	case 9:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0046 	case 11:
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0047 		retVal = 30;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0048 		break;
;PCODE: $0000012B VOL: 0
; 0000 0049 	case 2:
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 004A 		retVal = year % 4 == 0 ? 29 : 28;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 004B 		break;
;PCODE: $0000013C VOL: 0
; 0000 004C 	}
;PCODE: $0000013D VOL: 0
; 0000 004D 	return retVal;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 004E }
;PCODE: $00000141 VOL: 0
;void doBtn2Action(void) {
; 0000 004F void doBtn2Action(void) {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0050 	switch (mode) {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0051 	case MODE_SHOW_MAIN_INFO: {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0052 		mode = MODE_SHOW_SECONDS;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0053 		break;
;PCODE: $0000014A VOL: 0
; 0000 0054 	}
; 0000 0055 	case MODE_SET_DATE_YEAR: {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0056 		year = year < 99 ? (year + 1) : 0;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0057 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0058 		break;
;PCODE: $00000162 VOL: 0
; 0000 0059 	}
; 0000 005A 	case MODE_SET_DATE_MONTH: {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 005B 		month = month < 12 ? (month + 1) : 1;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 005C 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 005D 		break;
;PCODE: $0000017A VOL: 0
; 0000 005E 	}
; 0000 005F 	case MODE_SET_DATE_DAY_OF_WEEK: {
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0060 		day = day < 7 ? (day + 1) : 1;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0061 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0062 		break;
;PCODE: $00000192 VOL: 0
; 0000 0063 	}
; 0000 0064 	case MODE_SET_DATE_DAY: {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0065 		date = date < getLastMonthDay() ? (date + 1) : 1;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0066 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0067 		break;
;PCODE: $000001AA VOL: 0
; 0000 0068 	}
; 0000 0069 	case MODE_SET_TIME_HOUR: {
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 006A 		hours = hours < 23 ? (hours + 1) : 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 006B 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 006C 		break;
;PCODE: $000001C2 VOL: 0
; 0000 006D 	}
; 0000 006E 	case MODE_SET_TIME_MINUTE: {
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 006F 		minutes = minutes < 59 ? (minutes + 1) : 0;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0070 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0071 		break;
;PCODE: $000001DA VOL: 0
; 0000 0072 	}
; 0000 0073 	case MODE_SET_TIME_SECONDS: {
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0074 		seconds = 0;
;PCODE: $000001DE VOL: 0
; 0000 0075 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0076 		break;
;PCODE: $000001E7 VOL: 0
; 0000 0077 	}
; 0000 0078 	case MODE_SHOW_SECONDS: {
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0079 		mode = MODE_SHOW_MAIN_INFO;
;PCODE: $000001EB VOL: 0
; 0000 007A 		break;
;PCODE: $000001EC VOL: 0
; 0000 007B 	}
; 0000 007C 
; 0000 007D 	}
;PCODE: $000001ED VOL: 0
; 0000 007E 
; 0000 007F }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;
;void doBtn3Action(void) {
; 0000 0081 void doBtn3Action(void) {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0082 	switch (mode) {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0083 	case MODE_SHOW_MAIN_INFO: {
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0084 		//LED_BACKLIGT = ~LED_BACKLIGT;
; 0000 0085 		// LED_GREEN = ~LED_GREEN;
; 0000 0086 		break;
;PCODE: $000001F6 VOL: 0
; 0000 0087 	}
; 0000 0088 	case MODE_SET_DATE_YEAR: {
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0089 		year = year > 0 ? (year - 1) : 99;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 008A 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 008B 		break;
;PCODE: $0000020E VOL: 0
; 0000 008C 	}
; 0000 008D 	case MODE_SET_DATE_MONTH: {
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 008E 		month = month > 1 ? (month - 1) : 12;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 008F 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0090 		break;
;PCODE: $00000226 VOL: 0
; 0000 0091 	}
; 0000 0092 	case MODE_SET_DATE_DAY_OF_WEEK: {
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0093 		day = day > 1 ? (day - 1) : 7;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0094 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0095 		break;
;PCODE: $0000023E VOL: 0
; 0000 0096 	}
; 0000 0097 	case MODE_SET_DATE_DAY: {
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0098 		date = date > 1 ? (date - 1) : getLastMonthDay();
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0099 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 009A 		break;
;PCODE: $00000256 VOL: 0
; 0000 009B 	}
; 0000 009C 	case MODE_SET_TIME_HOUR: {
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 009D 		hours = hours > 0 ? (hours - 1) : 23;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 009E 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 009F 		break;
;PCODE: $0000026E VOL: 0
; 0000 00A0 	}
; 0000 00A1 	case MODE_SET_TIME_MINUTE: {
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 00A2 		minutes = minutes > 0 ? (minutes - 1) : 59;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00A3 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 00A4 		break;
;PCODE: $00000286 VOL: 0
; 0000 00A5 	}
; 0000 00A6 	case MODE_SET_TIME_SECONDS: {
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 00A7 		seconds = 0;
;PCODE: $0000028A VOL: 0
; 0000 00A8 		rtc_set_time(seconds, minutes, hours, day, date, month, year);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 00A9 		break;
;PCODE: $00000293 VOL: 0
; 0000 00AA 	}
; 0000 00AB 	case MODE_SHOW_SECONDS: {
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 00AC 		mode = MODE_SHOW_MAIN_INFO;
;PCODE: $00000297 VOL: 0
; 0000 00AD 		break;
;PCODE: $00000298 VOL: 0
; 0000 00AE 	}
; 0000 00AF 	}
;PCODE: $00000299 VOL: 0
; 0000 00B0 }
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
; 0000 00B3 interrupt [9] void timer1_ovf_isr(void) {
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 00B4 	if(!PINC.0) {
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 00B5 		if(button_1_on1) {
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 00B6 			if(button_1_on2) {
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 00B7 				if(button_1_on3) {
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 00B8 					doBtn1Action();
;PCODE: $000002AA VOL: 0
; 0000 00B9 
; 0000 00BA 					button_1_on1 = 0;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 00BB 					button_1_on2 = 0;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 00BC 					button_1_on3 = 0;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 00BD 				} else {
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 00BE 					button_1_on3 = 1;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 00BF 				}
;PCODE: $000002B9 VOL: 0
; 0000 00C0 			} else {
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 00C1 				button_1_on2 = 1;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 00C2 				button_1_on3 = 0;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 00C3 			}
;PCODE: $000002C2 VOL: 0
; 0000 00C4 		} else {
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 00C5 			button_1_on1 = 1;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 00C6 			button_1_on2 = 0;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 00C7 			button_1_on3 = 0;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 00C8 		}
;PCODE: $000002CE VOL: 0
; 0000 00C9 	}
; 0000 00CA 	if(!PINC.1) {
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 00CB 		if(button_2_on1) {
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 00CC 			if(button_2_on2) {
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 00CD 				if(button_2_on3) {
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 00CE 					doBtn2Action();
;PCODE: $000002DC VOL: 0
; 0000 00CF 
; 0000 00D0 					button_2_on1 = 0;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 00D1 					button_2_on2 = 0;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 00D2 					button_2_on3 = 0;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 00D3 				} else {
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 00D4 					button_2_on3 = 1;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 00D5 				}
;PCODE: $000002EB VOL: 0
; 0000 00D6 			} else {
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 00D7 				button_2_on2 = 1;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 00D8 				button_2_on3 = 0;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 00D9 			}
;PCODE: $000002F4 VOL: 0
; 0000 00DA 		} else {
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 00DB 			button_2_on1 = 1;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 00DC 			button_2_on2 = 0;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 00DD 			button_2_on3 = 0;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 00DE 		}
;PCODE: $00000300 VOL: 0
; 0000 00DF 	}
; 0000 00E0 	if(!PINC.2) {
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 00E1 		if(button_3_on1) {
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 00E2 			if(button_3_on2) {
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 00E3 				if(button_3_on3) {
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 00E4 					doBtn3Action();
;PCODE: $0000030E VOL: 0
; 0000 00E5 
; 0000 00E6 					button_3_on1 = 0;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 00E7 					button_3_on2 = 0;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 00E8 					button_3_on3 = 0;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 00E9 				} else {
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 00EA 					button_3_on3 = 1;
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 00EB 				}
;PCODE: $0000031D VOL: 0
; 0000 00EC 			} else {
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 00ED 				button_3_on2 = 1;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 00EE 				button_3_on3 = 0;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 00EF 			}
;PCODE: $00000326 VOL: 0
; 0000 00F0 		} else {
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 00F1 			button_3_on1 = 1;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 00F2 			button_3_on2 = 0;
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 00F3 			button_3_on3 = 0;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 00F4 		}
;PCODE: $00000332 VOL: 0
; 0000 00F5 	}
; 0000 00F6 
; 0000 00F7 //	if(!PINC.1) {
; 0000 00F8 //		if(button_2_on) {
; 0000 00F9 //			doBtn2Action();
; 0000 00FA //		}
; 0000 00FB //		button_2_on = !button_2_on;
; 0000 00FC //	}
; 0000 00FD //	if(!PINC.2) {
; 0000 00FE //		if(button_3_on) {
; 0000 00FF //			doBtn3Action();
; 0000 0100 //		}
; 0000 0101 //		button_3_on = !button_3_on;
; 0000 0102 //	}
; 0000 0103 	TCNT1=0;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0104 	PORTB.6=~PORTB.6;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 0105 }
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void) {
; 0000 0108 interrupt [5] void timer2_ovf_isr(void) {
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0109 	if(displayCounter == 0) {
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 010A 		PORTD&= 0b00000000;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 010B 		PORTD=digit_out[cur_dig];
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 010C 
; 0000 010D 		PORTD |= commonPins[cur_dig];
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 010E 
; 0000 010F 
; 0000 0110 		cur_dig++;
;PCODE: $00000357 VOL: 0
; 0000 0111 		if (cur_dig > 3) {
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0112 			cur_dig = 0;
;PCODE: $0000035B VOL: 0
; 0000 0113 		}
; 0000 0114 	}
;PCODE: $0000035C VOL: 0
; 0000 0115 }
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;
;
;
;void displayInfo(void) {
; 0000 0119 void displayInfo(void) {
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 011A 	switch (mode) {
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 011B 	case MODE_SHOW_MAIN_INFO:
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 011C 		digit_out[0] = hours / 10;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 011D 		digit_out[1] = hours % 10;
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 011E 		digit_out[2] = minutes / 10;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 011F 		digit_out[3] = minutes % 10;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 0120 		break;
;PCODE: $0000037E VOL: 0
; 0000 0121 
; 0000 0122 	case MODE_SET_DATE_YEAR:
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0123 		digit_out[0] = 0;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0124 		digit_out[1] = 1;
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 0125 		digit_out[2] = year / 10;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0126 		digit_out[3] = year % 10;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0127 		break;
;PCODE: $00000393 VOL: 0
; 0000 0128 	case MODE_SET_DATE_MONTH:
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0129 		digit_out[0] = 0;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 012A 		digit_out[1] = 2;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 012B 		digit_out[2] = month / 10;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 012C 		digit_out[3] = month % 10;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 012D 		break;
;PCODE: $000003A8 VOL: 0
; 0000 012E 	case MODE_SET_DATE_DAY_OF_WEEK:
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 012F 		digit_out[0] = 0;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0130 		digit_out[1] = 3;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0131 		digit_out[2] = day / 10;
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0132 		digit_out[3] = day % 10;
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 0133 		break;
;PCODE: $000003BD VOL: 0
; 0000 0134 	case MODE_SET_DATE_DAY:
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0135 		digit_out[0] = 0;
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0136 		digit_out[1] = 4;
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0137 		digit_out[2] = date / 10;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 0138 		digit_out[3] = date % 10;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 0139 		break;
;PCODE: $000003D2 VOL: 0
; 0000 013A 
; 0000 013B 	case MODE_SET_TIME_HOUR:
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 013C 		digit_out[0] = 9;
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 013D 		digit_out[1] = 1;
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 013E 		digit_out[2] = hours / 10;
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 013F 		digit_out[3] = hours % 10;
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 0140 		break;
;PCODE: $000003E7 VOL: 0
; 0000 0141 	case MODE_SET_TIME_MINUTE:
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 0142 		digit_out[0] = 9;
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0143 		digit_out[1] = 2;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0144 		digit_out[2] = minutes / 10;
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0145 		digit_out[3] = minutes % 10;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0146 		break;
;PCODE: $000003FC VOL: 0
; 0000 0147 	case MODE_SET_TIME_SECONDS:
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 0148 		digit_out[0] = 9;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0149 		digit_out[1] = 3;
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 014A 		digit_out[2] = seconds / 10;
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 014B 		digit_out[3] = seconds % 10;
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 014C 		break;
;PCODE: $00000411 VOL: 0
; 0000 014D 	case MODE_SHOW_SECONDS:
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 014E 		digit_out[0] = 0;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 014F 		digit_out[1] = 0;
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 0150 		digit_out[2] = seconds / 10;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0151 		digit_out[3] = seconds % 10;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0152 		break;
;PCODE: $00000426 VOL: 0
; 0000 0153 
; 0000 0154 
; 0000 0155 	}
;PCODE: $00000427 VOL: 0
; 0000 0156 }
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;
;void main(void)
; 0000 0159 {
;PCODE: $0000042A VOL: 0
; 0000 015A // Declare your local variables here
; 0000 015B 	unsigned char i = 0;
; 0000 015C     unsigned char tmp_counter;
; 0000 015D 
; 0000 015E 	PORTB = 0xFF;
;	i -> R17
;	tmp_counter -> R16
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 015F 	DDRB = 0xFF;
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 0160 
; 0000 0161 	PORTC = 0x07;
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 0162 	DDRC = 0xF8;
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 0163 
; 0000 0164 	PORTD = 0xFF;;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0165 	DDRD = 0xFF;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0166 
; 0000 0167 
; 0000 0168 // Timer/Counter 0 initialization
; 0000 0169 // Clock source: System Clock
; 0000 016A // Clock value: Timer 0 Stopped
; 0000 016B 	TCCR0 = 0x00;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 016C 	TCNT0 = 0x00;
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 016D 
; 0000 016E 	// Timer/Counter 1 initialization
; 0000 016F 	// Clock source: System Clock
; 0000 0170 	// Clock value: 7,813 kHz
; 0000 0171 	// Mode: Normal top=0xFFFF
; 0000 0172 	// OC1A output: Discon.
; 0000 0173 	// OC1B output: Discon.
; 0000 0174 	// Noise Canceler: Off
; 0000 0175 	// Input Capture on Falling Edge
; 0000 0176 	// Timer1 Overflow Interrupt: On
; 0000 0177 	// Input Capture Interrupt: Off
; 0000 0178 	// Compare A Match Interrupt: Off
; 0000 0179 	// Compare B Match Interrupt: Off
; 0000 017A 	TCCR1A=0x00;
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 017B 	TCCR1B=0x02;
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 017C 	TCNT1H=0x00;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 017D 	TCNT1L=0x00;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 017E 	ICR1H=0x00;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 017F 	ICR1L=0x00;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 0180 	OCR1AH=0x00;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0181 	OCR1AL=0x00;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 0182 	OCR1BH=0x00;
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 0183 	OCR1BL=0x00;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0184 
; 0000 0185 
; 0000 0186 // Timer/Counter 2 initialization
; 0000 0187 // Clock source: System Clock
; 0000 0188 // Clock value: 62,500 kHz
; 0000 0189 // Mode: Normal top=0xFF
; 0000 018A // OC2 output: Disconnected
; 0000 018B ASSR = 0x00;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 018C TCCR2 = 0x05;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 018D TCNT2 = 0x00;
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 018E OCR2 = 0x00;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 018F 
; 0000 0190 // External Interrupt(s) initialization
; 0000 0191 // INT0: Off
; 0000 0192 // INT1: Off
; 0000 0193 MCUCR=0x00;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 0194 
; 0000 0195 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0196 TIMSK = 0x44;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0197 
; 0000 0198 
; 0000 0199 // USART initialization
; 0000 019A // USART disabled
; 0000 019B UCSRB=0x00;
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 019C 
; 0000 019D // Analog Comparator initialization
; 0000 019E // Analog Comparator: Off
; 0000 019F // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01A0 ACSR=0x80;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 01A1 SFIOR=0x00;
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 01A2 
; 0000 01A3 // ADC initialization
; 0000 01A4 // ADC disabled
; 0000 01A5 ADCSRA=0x00;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 01A6 
; 0000 01A7 // SPI initialization
; 0000 01A8 // SPI disabled
; 0000 01A9 SPCR=0x00;
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 01AA 
; 0000 01AB // TWI initialization
; 0000 01AC // TWI disabled
; 0000 01AD TWBR = 0x0C;
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 01AE TWAR = 0xD0;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 01AF TWCR = 0x44;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01B0 
; 0000 01B1 // Global enable interrupts
; 0000 01B2 #asm("sei")
;PCODE: $0000046D VOL: 0
	sei
;PCODE: $0000046E VOL: 0
; 0000 01B3 //digit_out[0] = 7;
; 0000 01B4 //digit_out[1] = 8;
; 0000 01B5 //digit_out[2] = 9;
; 0000 01B6 //digit_out[3] = 6;
; 0000 01B7 //PORTD.0=1;
; 0000 01B8 //PORTD.1=0;
; 0000 01B9 //PORTD.2=0;
; 0000 01BA //PORTD.3=1;
; 0000 01BB //PORTD.4=1;
; 0000 01BC //PORTD.5=1;
; 0000 01BD //PORTD.6=1;
; 0000 01BE //PORTD.7=1;
; 0000 01BF 
; 0000 01C0 ds3231_init();
;PCODE: $0000046F VOL: 0
; 0000 01C1 	rtc_get_time(&seconds, &minutes, &hours, &day, &date, &month, &year);
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 01C2 
; 0000 01C3 
; 0000 01C4 	tmp_counter = 0;
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 01C5 		while (1) {
;PCODE: $00000480 VOL: 0
; 0000 01C6 			rtc_get_time(&seconds, &minutes, &hours, &day, &date, &month, &year);
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 01C7 			tmp_counter++;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 01C8 			if(tmp_counter == 5) {
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 01C9 				show_point = ~show_point;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 01CA 				tmp_counter = 0;
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 01CB 			}
; 0000 01CC 
; 0000 01CD 			displayInfo();
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 01CE 			delay_ms(100);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 01CF 		}
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 01D0 
; 0000 01D1 }
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
