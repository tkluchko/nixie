#include <mega8.h>
#include <delay.h>
#include "ds3231_twi.c"
//didits pins 
#define DIGIT_1  16
#define DIGIT_2  32
#define DIGIT_3  64
#define DIGIT_4  128

#define MODE_SHOW_MAIN_INFO 0
#define MODE_SET_DATE_YEAR 1
#define MODE_SET_DATE_MONTH 2
#define MODE_SET_DATE_DAY_OF_WEEK 3
#define MODE_SET_DATE_DAY 4
#define MODE_SET_TIME_HOUR 5
#define MODE_SET_TIME_MINUTE 6
#define MODE_SET_TIME_SECONDS 7
#define MODE_SHOW_SECONDS 8

static flash unsigned char commonPins[] = {
	DIGIT_1,
	DIGIT_2,
	DIGIT_3,
	DIGIT_4
};

unsigned char digit_out[4], cur_dig = 0;
unsigned char displayCounter = 0;

unsigned char seconds;
unsigned char minutes;
unsigned char hours;
unsigned char day;
unsigned char date;
unsigned char month;
unsigned char year;

bit button_1_on1;
bit button_2_on1;
bit button_3_on1;
bit button_1_on2;
bit button_2_on2;
bit button_3_on2;
bit button_1_on3;
bit button_2_on3;
bit button_3_on3;

unsigned char mode;
bit show_point;

void doBtn1Action(void) {
	mode = mode < 7 ? (mode + 1) : 0;
}

unsigned char getLastMonthDay(void) {
	unsigned char retVal = 31;
	switch (month) {
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		retVal = 31;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		retVal = 30;
		break;
	case 2:
		retVal = year % 4 == 0 ? 29 : 28;
		break;
	}
	return retVal;
}
void doBtn2Action(void) {
	switch (mode) {
	case MODE_SHOW_MAIN_INFO: {
		mode = MODE_SHOW_SECONDS;
		break;
	}
	case MODE_SET_DATE_YEAR: {
		year = year < 99 ? (year + 1) : 0;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_MONTH: {
		month = month < 12 ? (month + 1) : 1;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_DAY_OF_WEEK: {
		day = day < 7 ? (day + 1) : 1;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_DAY: {
		date = date < getLastMonthDay() ? (date + 1) : 1;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_HOUR: {
		hours = hours < 23 ? (hours + 1) : 0;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_MINUTE: {
		minutes = minutes < 59 ? (minutes + 1) : 0;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_SECONDS: {
		seconds = 0;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SHOW_SECONDS: {
		mode = MODE_SHOW_MAIN_INFO;
		break;
	}

	}
	
}

void doBtn3Action(void) {
	switch (mode) {
	case MODE_SHOW_MAIN_INFO: {
		//LED_BACKLIGT = ~LED_BACKLIGT;
		// LED_GREEN = ~LED_GREEN;
		break;
	}
	case MODE_SET_DATE_YEAR: {
		year = year > 0 ? (year - 1) : 99;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_MONTH: {
		month = month > 1 ? (month - 1) : 12;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_DAY_OF_WEEK: {
		day = day > 1 ? (day - 1) : 7;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_DATE_DAY: {
		date = date > 1 ? (date - 1) : getLastMonthDay();
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_HOUR: {
		hours = hours > 0 ? (hours - 1) : 23;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_MINUTE: {
		minutes = minutes > 0 ? (minutes - 1) : 59;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SET_TIME_SECONDS: {
		seconds = 0;
		rtc_set_time(seconds, minutes, hours, day, date, month, year);
		break;
	}
	case MODE_SHOW_SECONDS: {
		mode = MODE_SHOW_MAIN_INFO;
		break;
	}
	}
}

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
	if(!PINC.0) {
		if(button_1_on1) {
			if(button_1_on2) {
				if(button_1_on3) {
					doBtn1Action();

					button_1_on1 = 0;
					button_1_on2 = 0;
					button_1_on3 = 0;
				} else {
					button_1_on3 = 1;
				}
			} else {
				button_1_on2 = 1;
				button_1_on3 = 0;
			}
		} else {
			button_1_on1 = 1;
			button_1_on2 = 0;
			button_1_on3 = 0;
		}
	}
	if(!PINC.1) {
		if(button_2_on1) {
			if(button_2_on2) {
				if(button_2_on3) {
					doBtn2Action();

					button_2_on1 = 0;
					button_2_on2 = 0;
					button_2_on3 = 0;
				} else {
					button_2_on3 = 1;
				}
			} else {
				button_2_on2 = 1;
				button_2_on3 = 0;
			}
		} else {
			button_2_on1 = 1;
			button_2_on2 = 0;
			button_2_on3 = 0;
		}
	}
	if(!PINC.2) {
		if(button_3_on1) {
			if(button_3_on2) {
				if(button_3_on3) {
					doBtn3Action();

					button_3_on1 = 0;
					button_3_on2 = 0;
					button_3_on3 = 0;
				} else {
					button_3_on3 = 1;
				}
			} else {
				button_3_on2 = 1;
				button_3_on3 = 0;
			}
		} else {
			button_3_on1 = 1;
			button_3_on2 = 0;
			button_3_on3 = 0;
		}
	}

//	if(!PINC.1) {
//		if(button_2_on) {
//			doBtn2Action();
//		}
//		button_2_on = !button_2_on;
//	}
//	if(!PINC.2) {
//		if(button_3_on) {
//			doBtn3Action();
//		}
//		button_3_on = !button_3_on;
//	}
	TCNT1=0;
	PORTB.6=~PORTB.6;
}

// Timer2 overflow interrupt service routine
interrupt [TIM2_OVF] void timer2_ovf_isr(void) {
	if(displayCounter == 0) {
		PORTD&= 0b00000000;
		PORTD=digit_out[cur_dig];

		PORTD |= commonPins[cur_dig];
	
		
		cur_dig++;
		if (cur_dig > 3) {
			cur_dig = 0;
		}
	}
}



void displayInfo(void) {
	switch (mode) {
	case MODE_SHOW_MAIN_INFO:
		digit_out[0] = hours / 10;
		digit_out[1] = hours % 10;
		digit_out[2] = minutes / 10;
		digit_out[3] = minutes % 10;
		break;

	case MODE_SET_DATE_YEAR:
		digit_out[0] = 0;
		digit_out[1] = 1;
		digit_out[2] = year / 10;
		digit_out[3] = year % 10;
		break;
	case MODE_SET_DATE_MONTH:
		digit_out[0] = 0;
		digit_out[1] = 2;
		digit_out[2] = month / 10;
		digit_out[3] = month % 10;
		break;
	case MODE_SET_DATE_DAY_OF_WEEK:
		digit_out[0] = 0;
		digit_out[1] = 3;
		digit_out[2] = day / 10;
		digit_out[3] = day % 10;
		break;
	case MODE_SET_DATE_DAY:
		digit_out[0] = 0;
		digit_out[1] = 4;
		digit_out[2] = date / 10;
		digit_out[3] = date % 10;
		break;

	case MODE_SET_TIME_HOUR:
		digit_out[0] = 9;
		digit_out[1] = 1;
		digit_out[2] = hours / 10;
		digit_out[3] = hours % 10;
		break;
	case MODE_SET_TIME_MINUTE:
		digit_out[0] = 9;
		digit_out[1] = 2;
		digit_out[2] = minutes / 10;
		digit_out[3] = minutes % 10;
		break;
	case MODE_SET_TIME_SECONDS:
		digit_out[0] = 9;
		digit_out[1] = 3;
		digit_out[2] = seconds / 10;
		digit_out[3] = seconds % 10;
		break;
	case MODE_SHOW_SECONDS:
		digit_out[0] = 0;
		digit_out[1] = 0;
		digit_out[2] = seconds / 10;
		digit_out[3] = seconds % 10;
		break;
		
		
	}
}

void main(void)
{
// Declare your local variables here
	unsigned char i = 0;
    unsigned char tmp_counter;

	PORTB = 0xFF;
	DDRB = 0xFF;

	PORTC = 0x07;
	DDRC = 0xF8;

	PORTD = 0xFF;;
	DDRD = 0xFF;


// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
	TCCR0 = 0x00;
	TCNT0 = 0x00;

	// Timer/Counter 1 initialization
	// Clock source: System Clock
	// Clock value: 7,813 kHz
	// Mode: Normal top=0xFFFF
	// OC1A output: Discon.
	// OC1B output: Discon.
	// Noise Canceler: Off
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: On
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
	TCCR1B=0x02;
	TCNT1H=0x00;
	TCNT1L=0x00;
	ICR1H=0x00;
	ICR1L=0x00;
	OCR1AH=0x00;
	OCR1AL=0x00;
	OCR1BH=0x00;
	OCR1BL=0x00;


// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR = 0x00;
TCCR2 = 0x05;
TCNT2 = 0x00;
OCR2 = 0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK = 0x44;


// USART initialization
// USART disabled
UCSRB=0x00;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC disabled
ADCSRA=0x00;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWBR = 0x0C;
TWAR = 0xD0;
TWCR = 0x44;

// Global enable interrupts
#asm("sei")
//digit_out[0] = 7;
//digit_out[1] = 8;
//digit_out[2] = 9;
//digit_out[3] = 6;
//PORTD.0=1;
//PORTD.1=0;
//PORTD.2=0;
//PORTD.3=1;
//PORTD.4=1;
//PORTD.5=1;
//PORTD.6=1;
//PORTD.7=1;

ds3231_init();
	rtc_get_time(&seconds, &minutes, &hours, &day, &date, &month, &year);

	
	tmp_counter = 0;
		while (1) {
			rtc_get_time(&seconds, &minutes, &hours, &day, &date, &month, &year);
			tmp_counter++;
			if(tmp_counter == 5) {
				show_point = ~show_point;
				tmp_counter = 0;
			}
			
			displayInfo();
			delay_ms(100);
		}

}